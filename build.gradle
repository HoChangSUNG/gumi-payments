plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id "io.freefair.lombok" version "8.4"
	id "org.openapi.generator" version "6.5.0"
}
group = 'flab'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
	compileJava.options.encoding = "UTF-8"
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:mysql'

	// api first
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
	implementation 'javax.validation:validation-api:2.0.1.Final'
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	implementation 'javax.servlet:javax.servlet-api:4.0.1'
	implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
}

tasks.named('test') {
	useJUnitPlatform()
}


// api first start
def swaggerMap = [
		"test": "test.yaml"
]

swaggerMap.each{entry ->
	tasks.create("openApiGenerate-" + entry.key, org.openapitools.generator.gradle.plugin.tasks.GenerateTask, {
		verbose.set(true)
		generatorName.set("spring")
		library.set("spring-boot")
		inputSpec.set("$rootDir/src/main/resources/api/${entry.value}")
		outputDir.set(project.file("$buildDir/generated-sources").absolutePath)
		apiPackage.set("flab.gumipayments.apifirst.openapi.${entry.key}.rest")
		modelPackage.set("flab.gumipayments.apifirst.openapi.${entry.key}.domain")
		configOptions.set(
				[
						interfaceOnly: "true",
						useBeanValidation: "true",
						performBeanValidation: "true",
						serializableModel: "true",
						sourceFolder: "/java",
						implFolder: "/java",
				]
		)
	})
}

tasks.register("openApiGenerateAll") {
	print swaggerMap.entrySet().stream().map(entry -> "openApiGenerate-${entry.key}").toArray()
	dependsOn(swaggerMap.entrySet().stream().map(entry -> "openApiGenerate-${entry.key}").toArray())
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', 'build/generated-sources/java']
		}
	}
}

compileJava.dependsOn tasks.openApiGenerateAll
// api first end