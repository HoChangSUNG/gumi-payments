plugins {
    id 'org.openapi.generator'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
}

FileTree yamlFiles = fileTree(dir: "$projectDir/src/main/resources/api", include: '**/*.yaml')

def swaggerMap = [:]
yamlFiles.each{file ->
    String key = file.name - '.yaml'
    swaggerMap[key] = file.name
}

swaggerMap.each{entry ->
    tasks.create("openApiGenerate-" + entry.key, org.openapitools.generator.gradle.plugin.tasks.GenerateTask, {
        verbose.set(true)
        generatorName.set("spring")
        library.set("spring-boot")
        inputSpec.set("$projectDir/src/main/resources/api/${entry.value}")
        outputDir.set(project.file("$buildDir/generated-sources").absolutePath)
        apiPackage.set("flab.gumipayments.apifirst.openapi.${entry.key}.rest")
        modelPackage.set("flab.gumipayments.apifirst.openapi.${entry.key}.domain")
        configOptions.set(
                [
                        interfaceOnly: "true",
                        useBeanValidation: "true",
                        performBeanValidation: "true",
                        serializableModel: "true",
                        sourceFolder: "/java",
                        implFolder: "/java",
                        useTags: "true", // tage 단위로 rest api 클래스 생성
                        useSpringBoot3: "true", // @Valid : javax.validation -> jakarta.validation
                        additionalModelTypeAnnotations: "@lombok.NoArgsConstructor @lombok.AllArgsConstructor @lombok.Builder",
                ]
        )

        // 날짜 OffsetDateTime -> LocalDateTime로 컨버팅
        typeMappings = [
                OffsetDateTime: "LocalDateTime"
        ]
        importMappings = [
                "java.time.OffsetDateTime": "java.time.LocalDateTime"
        ]
        // 끝
        templateDir.set("$rootDir/buildSrc/template") // code generator template 추가
    })
}

tasks.register("openApiGenerateAll") {
    print swaggerMap.entrySet().stream().map(entry -> "openApiGenerate-${entry.key}").toArray()
    dependsOn(swaggerMap.entrySet().stream().map(entry -> "openApiGenerate-${entry.key}").toArray())
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'build/generated-sources/java']
        }
    }
}

compileJava.dependsOn tasks.openApiGenerateAll